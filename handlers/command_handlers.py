import datetime

from config.settings import DB_PATH
from config.settings import ADMIN_USER_ID
import sqlite3
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes

def validate_date(date_text):
    try:
        date = datetime.datetime.strptime(date_text, '%Y-%m-%d')
        return date
    except ValueError:
        return None


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.message.from_user
    welcome_message = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è–º–∏! "
        "–í–æ—Ç —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å:\n\n"
        "1. –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏ –¥–æ–±–∞–≤–ª—è—Ç—å —Å–æ–±—ã—Ç–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.\n"
        "2. –ò—Å–∫–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –ø–æ –¥–∞—Ç–µ.\n"
        "3. –ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Å–≤–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu –¥–ª—è –≤—ã–∑–æ–≤–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."
    )
    await update.message.reply_text(welcome_message)

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton("–ò–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data='favorites')],
        [InlineKeyboardButton("–ü–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏–π", callback_data='search')],
        [InlineKeyboardButton("–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data='my_events')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:', reply_markup=reply_markup)


async def moderate_suggestions(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    if user_id != ADMIN_USER_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute(
        'SELECT id, user_id, date, title, description, image_path, status FROM suggestions WHERE status = "–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ"')
    suggestions = cursor.fetchall()
    conn.close()

    if suggestions:
        for suggestion_id, user_id, date, title, description, image_path, status in suggestions:
            keyboard = [
                [InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å", callback_data=f'approve_{suggestion_id}')],
                [InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f'reject_{suggestion_id}')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            if image_path:
                await update.message.reply_photo(photo=image_path,
                                                 caption=f"ID: {suggestion_id}\n–î–∞—Ç–∞: {date}\n–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n–°—Ç–∞—Ç—É—Å: {status}",
                                                 reply_markup=reply_markup)
            else:
                await update.message.reply_text(
                    f"ID: {suggestion_id}\n–î–∞—Ç–∞: {date}\n–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n–°—Ç–∞—Ç—É—Å: {status}",
                    reply_markup=reply_markup)
    else:
        await update.message.reply_text("–ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")

async def show_suggestions_status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    import sqlite3
    from config.settings import DB_PATH

    user_id = update.message.from_user.id
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('SELECT date, title, description, status FROM suggestions WHERE user_id = ?', (user_id,))
    suggestions = cursor.fetchall()
    conn.close()
    if suggestions:
        message = "–í–∞—à–∏ –∑–∞—è–≤–∫–∏:\n\n" + "\n\n".join(
            [f"–î–∞—Ç–∞: {date}\n–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n–°—Ç–∞—Ç—É—Å: {status}" for
             date, title, description, status in suggestions])
    else:
        message = "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫."
    await update.message.reply_text(message)


async def clear_all_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message.from_user.id != ADMIN_USER_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    print(context.args)
    if len(context.args) == 0:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ —Å –∫–æ–º–∞–Ω–¥–æ–π.")
        return

    date_str = context.args[0]
    date = validate_date(date_str)
    print(date_str, date)
    if not date:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.")
        return

    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute('DELETE FROM suggestions WHERE date <= ?', (date_str,))
        cursor.execute('DELETE FROM events WHERE date <= ?', (date_str,))
        cursor.execute('DELETE FROM favorites WHERE event_id IN (SELECT id FROM events WHERE date <= ?)', (date_str,))
        conn.commit()
        conn.close()
        await update.message.reply_text(f"–í—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö –¥–æ {date_str} –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.")
    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")